blueprint:
  name: UniFi Protect Smart Detection Notifications
  description: "## UniFi Protect Smart Detection Notifications\n\nThis blueprint will\
    \ send push notifications to desktop browser / mobile Home Assistant / Telegram\
    \ apps when a smart detection event is fired.\n\nThis blueprint is _only_ for\
    \ **smart detection**, not motion.\n\n### Required Settings\n\n  - UniFi Protect\
    \ Smart Detection Sensor\n  - What Smart Detection(s) you want to trigger on\n\
    \n### Optional Settings\n\n  - Precense filter for only sending notifications\
    \ for when you are not home\n  - Notification targets and toggles for following\
    \ notifications types:\n    - [HTML5 Push Notification][1]\n    - [Mobile App\
    \ Notification][2]\n    - [Telegram Notification][9]\n  - Time formatting strings.\
    \ Timestamp is injected into the notification in case the notification is delay.\n\
    \  - Notification Channel / Tag (docs: [HTML5 Tag][3], [Android Channels][4],\
    \ [Mobile Tag][5])\n  - Cooldown before sending another notification\n  - Silence\
    \ timer for muting notifications via Actionable Notification (docs: [HTML5][6],\
    \ [Mobile][7])\n  - Configurable HA Internal / External Base URLs\n  - Configurable\
    \ Lovelace view from notification\n\n### Requirements\n\nTo take full effect of\
    \ this automation blueprint, your Home Assistant instance needs some setup beforehand.\n\
    \n- A UniFi Protect NVR running on a UDM Pro, UNVR or other Protect Console\n\
    - The [unifiprotect][8] integration version 0.11.0 or newer\n- A UniFi camera\
    \ pair with your NVR that has Smart Detections. This is any G4 series camera _except_\
    \ the EA G4 Instant.\n- A valid HTTPS certificate and public facing Home Assistant\
    \ instance\n  - If you do not have these, the actionable notifications and images\
    \ will not appear in the notifications.\n  - You do not need your _whole_ Home\
    \ Assistant to be publicly accessible. Only the paths `/api/camera_proxy/*` and`/api/webhook/*`\
    \ need to be accessible outside of your network.\n\n[1]: https://www.home-assistant.io/integrations/html5\n\
    [2]: https://companion.home-assistant.io/docs/notifications/notifications-basic#sending-notifications-to-multiple-devices\n\
    [3]: https://www.home-assistant.io/integrations/html5#tag\n[4]: https://companion.home-assistant.io/docs/notifications/notifications-basic/#notification-channels\n\
    [5]: https://companion.home-assistant.io/docs/notifications/notifications-basic/#replacing\n\
    [6]: https://www.home-assistant.io/integrations/html5#actions\n[7]: https://companion.home-assistant.io/docs/notifications/actionable-notifications/\n\
    [8]: https://community.home-assistant.io/t/custom-component-unifi-protect/158041\n\
    [9]: https://www.home-assistant.io/integrations/telegram/\n"
  domain: automation
  input:
    smart_entity:
      name: Smart Dection Entity
      description: 'The smart detection sensor for you want to fire events for.

        '
      selector:
        entity:
          integration: unifiprotect
          domain: sensor
          device_class: occupancy
    objects:
      name: (Optional) Smart Detections
      description: 'Smart Detections to filter on. List should be comma separated.
        Possible objects: person, vehicle

        '
      default: person,vehicle
      selector:
        text: {}
    presence_filter:
      name: (Optional) Presence Filter
      description: Only notify if selected presence entity is not "home".
      default: ''
      selector:
        entity: {}
    send_mobile:
      name: (Optional) Send Mobile App Notifications
      description: Send mobile app push notifications
      default: true
      selector:
        boolean: {}
    notify_target_app:
      name: (Optional) Notification Target (Mobile App)
      description: 'The notification target for mobile apps notifications. Should
        be only the specific service name in the notify domain. https://companion.home-assistant.io/docs/notifications/notifications-basic#sending-notifications-to-multiple-devices

        '
      default: notify
      selector:
        text: {}
    send_html5:
      name: (Optional) Send HTML5 Notifications
      description: 'Send HTML5 push notifications. Requires you to have configured
        push notifications on at least one device.

        '
      default: false
      selector:
        boolean: {}
    notify_target_html5:
      name: (Optional) Notification Target (HTML5 Push)
      description: 'The notification target for HTML5 push notifications. Should be
        only the specific service name in the notify domain. https://www.home-assistant.io/integrations/html5

        '
      default: push_notification
      selector:
        text: {}
    channel:
      name: (Optional) Notification Channel
      description: 'Notification channel/tag to use. Will automatically be prepended
        with "Manual " if action is triggered manually. https://companion.home-assistant.io/docs/notifications/notifications-basic#notification-channels

        '
      default: Smart Detection
      selector:
        text: {}
    send_telegram:
      name: (Optional) Telegram Notification
      description: 'Send a notification via Telegram. Telegram notification will not
        have a link to Home Assistant like the mobile apps.

        '
      default: false
      selector:
        boolean: {}
    notify_telegram:
      name: (Optional) Notification Target (Telegram)
      description: 'The notification target for Telegram notifications. Should be
        name of the Telegram bot you have configured. https://www.home-assistant.io/integrations/telegram/

        '
      default: telegrambot
      selector:
        text: {}
    time_format:
      name: (Optional) Time Format String
      description: 'Python datetime format code string for the event trigger time.
        This string is the actual time the motion event was triggered in case the
        automation or notification is delayed. Manual triggers will cause this to
        always be the time of the previous event. https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes

        '
      default: '%I:%M %p'
      selector:
        text: {}
    cooldown:
      name: (Optional) Cooldown
      description: 'Delay before sending another notification for this camera after
        the last event. Is also the interval you have to respond to actions in notification.

        '
      default: 30
      selector:
        number:
          max: 300.0
          min: 0.0
          unit_of_measurement: seconds
          step: 1.0
          mode: slider
    silence_timer:
      name: (Optional) Silence Notifications
      description: 'How long to silence notifications for this camera when requested
        as part of the actionable notification. The time interval you have to respond
        to the slient action is controlled by "Cooldown". Short Cooldown timers may
        prevent you from silencing.

        '
      default: 30
      selector:
        number:
          max: 300.0
          min: 0.0
          unit_of_measurement: minutes
          step: 1.0
          mode: slider
    base_ha_url:
      name: (Optional) Base Home Assistant URL
      description: Base URL to use for opening HA links in HTML5 push notifications.
      default: http://homeassistant.local:8123
      selector:
        text: {}
    base_image_url:
      name: (Optional) Base Image URL
      description: 'Publicly accessible base URL for your Home Assistant instance.
        If you are using Nabu Casa, it should be that URL. May be different from your
        Base Home Assistant URL if your HA instance not publicly accessible. Must
        be an HTTPS URL with a valid certificate.

        '
      default: ''
      selector:
        text: {}
    lovelace_view:
      name: (Optional) Lovelace View
      description: 'Home Assistant Lovelace view to open when clicking notification.

        If left blank, URI Notification actions will not be generated.

        '
      default: ''
      selector:
        text: {}
    debug_enabled:
      name: (Optional) Debug
      description: 'Enable debugging for automation. If enabled, will send persistent
        notifications with extra data.

        '
      default: false
      selector:
        boolean: {}
  source_url: https://raw.githubusercontent.com/briis/unifiprotect/master/blueprints/automation/unifiprotect/push_notification_smart_event.yaml
mode: single
max_exceeded: silent
variables:
  input_smart_entity: !input 'smart_entity'
  input_objects: !input 'objects'
  input_channel: !input 'channel'
  input_base_image_url: !input 'base_image_url'
  input_base_ha_url: !input 'base_ha_url'
  input_lovelace_view: !input 'lovelace_view'
  input_debug_enabled: !input 'debug_enabled'
  input_notify_target_app: !input 'notify_target_app'
  input_notify_target_html5: !input 'notify_target_html5'
  input_notify_telegram: !input 'notify_telegram'
  input_silence_timer: !input 'silence_timer'
  input_send_mobile: !input 'send_mobile'
  input_send_html5: !input 'send_html5'
  input_send_telegram: !input 'send_telegram'
  input_time_format: !input 'time_format'
  input_presence_filter: !input 'presence_filter'
  camera_entities: '[{% for eid in device_entities(device_id(input_smart_entity))
    %}{%if eid.startswith(''camera'') and not is_state(eid, ''unavailable'') %}"{{
    eid }}",{% endif %}{% endfor %}]'
  smart_entities: '[{% for eid in device_entities(device_id(input_smart_entity)) %}{%if
    eid.startswith(''sensor'') and is_state_attr(eid, "device_class", "occupancy")
    %}"{{ eid }}",{% endif %}{% endfor %}]'
  smart_detect_objs: '{{ (input_objects | lower).split('','') | map(''trim'') | list
    | select(''in'', [''person'', ''vehicle'']) | list }}'
  lovelace_view: '{{ input_lovelace_view | trim }}'
  camera_entity_id: '{{ camera_entities | default([None]) | first }}'
  trigger_object: '{{ states[input_smart_entity].state }}'
  trigger_time: "{% if states[input_smart_entity] == None %}\n  None\n{% else %}\n\
    \  {{ as_local(states[input_smart_entity].last_changed).strftime(input_time_format)\
    \ }}\n{% endif %}\n"
  notification_channel: "{% if \"from_state\" in trigger %}\n  {{ input_channel }}\n\
    {% else %}\n  Manual {{ input_channel }}\n{% endif %}\n"
  notification_tag: '{{ notification_channel.lower().replace('' '', ''-'') }}'
  notification_title: '{{ device_attr(input_smart_entity, ''name'') }}'
  notification_url: "{% if lovelace_view == \"\" %}\n  None\n{% else %}\n  {{ input_base_ha_url\
    \ | trim }}{{ lovelace_view }}\n{% endif %}\n"
  notification_message: '{{ trigger_object.title() }} detected by {{ notification_title
    }}{% if trigger_time != None %} at {{ trigger_time }}{% endif %}.'
  notification_message_html5: '{{ notification_message }}{% if notification_url !=
    None %}


    Tap to open camera in Home Assistant.

    {% endif %}

    '
  notification_image: "{% if camera_entity_id == None or input_base_image_url == \"\
    \" %}\n  None\n{% else %}\n  {{ input_base_image_url | trim }}{{ state_attr(camera_entity_id,\
    \ 'entity_picture') }}\n{% endif %}\n"
  silence_action: silence-{{ input_smart_entity }}
trigger:
- platform: state
  entity_id: !input 'smart_entity'
  from: none
condition:
- '{{ not input_presence_filter or not is_state(input_presence_filter, ''home'') }}'
- '{{ trigger_object in smart_detect_objs }}'
action:
- choose:
  - conditions: '{{ input_debug_enabled }}'
    sequence:
    - service: notify.persistent_notification
      data:
        title: 'Debug: {{ notification_title }}'
        message: 'Entity ID: `{{ input_smart_entity }}`

          Camera: `{{ camera_entity_id }}`

          Object: `{{ trigger_object }}`

          Notification Service (Mobile): `notify.{{ input_notify_target_app }}`

          Notification Service (HTML5): `notify.{{ input_notify_target_html5 }}`

          Notification Service (Telegram): `notify.{{ input_notify_telegram }}`


          Channel: {{ notification_channel }}

          Tag: {{ notification_tag }}

          Message: {{ notification_message }}

          Image: {{ notification_image }}

          URL: {{ notification_url }}

          '
- choose:
  - conditions: '{{ input_send_mobile }}'
    sequence:
    - service: notify.{{ input_notify_target_app }}
      data:
        message: '{{ notification_message }}'
        title: '{{ notification_title }}'
        data:
          tag: '{{ notification_tag }}'
          channel: '{{ notification_channel }}'
          ttl: 0
          priority: high
          time-sensitive: 1
          image: '{{ notification_image }}'
          attachment:
            url: '{{ notification_image }}'
          actions: '[{% if notification_url != None %} { "action": "URI", "title":
            "Open Camera", "uri": "{{ lovelace_view }}" }, {% endif %} {% if input_silence_timer
            > 0 %} { "action": "{{ silence_action }}", "title": "Silence", "destructive":
            True }, {% endif %}]

            '
- choose:
  - conditions: '{{ input_send_html5 }}'
    sequence:
    - service: notify.{{ input_notify_target_html5 }}
      data:
        message: '{{ notification_message_html5 }}'
        title: '{{ notification_title }}'
        data:
          tag: '{{ notification_tag }}'
          image: '{{ notification_image }}'
          url: '{{ notification_url }}'
          actions: '[{% if input_silence_timer > 0 %} { "action": "{{ silence_action
            }}", "title": "Silence" }, {% endif %}]

            '
- choose:
  - conditions: '{{ input_send_telegram }}'
    sequence:
    - service: notify.{{ input_notify_telegram }}
      data:
        title: '{{ notification_title }}'
        message: '{{ notification_message }}'
        data: "{\n  {%- if notification_image != None -%}\n  \"photo\": {\n    \"\
          url\": \"{{ notification_image }}\",\n    \"caption\": \"{{ notification_message\
          \ }}\",\n    \"message_tag\": \"{{ notification_tag }}\",\n  },\n  {%- endif\
          \ -%}\n  {%- if input_silence_timer > 0 -%}\n  \"inline_keyboard\": [\"\
          Silence:/{{ silence_action }}\"],\n  {%- endif -%}\n}\n"
- wait_for_trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: '{{ silence_action }}'
  - platform: event
    event_type: html5_notification.clicked
    event_data:
      action: '{{ silence_action }}'
  - platform: event
    event_type: telegram_callback
    event_data:
      data: /{{ silence_action }}
  timeout:
    seconds: !input 'cooldown'
  continue_on_timeout: false
- choose:
  - conditions: '{{ input_send_telegram }}'
    sequence:
    - service: telegram_bot.answer_callback_query
      data:
        message: Smart Detections notifications silenced for {{ input_silence_timer
          }} minutes
        callback_query_id: '{{ wait.trigger.event.data.id }}'
- choose:
  - conditions: '{{ input_debug_enabled }}'
    sequence:
    - service: notify.persistent_notification
      data:
        title: 'Debug: {{ notification_title }}'
        message: Silence started.
- delay:
    minutes: '{{ input_silence_timer }}'
- choose:
  - conditions: '{{ input_debug_enabled }}'
    sequence:
    - service: notify.persistent_notification
      data:
        title: 'Debug: {{ notification_title }}'
        message: Silence ended.

automation:
  - id: calculate_max_powerwall_charge_price
    alias: "Powerwall work out what prices to charge below"
    mode: single
    
    description: >
      Work out what price to charge below based on charge level, target and prices
      Assumptions:
      Powerwall useable Capacity: 13.2 kWh
      Max Charge Level is (13.2 - (solar_forecast - tomorrow_solar_threshold) + overnight_usage)/13.2
      ChargeRate = 3.6 kW      
      
    trigger:
    # Forecast.Solar goes to zero between 11(:30) and 00:00 ???
      - platform: time
        id: 'time'
        at: 
          - '22:15:00'  
          - '00:25:00'            
          - '02:35:00'   
          - '04:45:00'
      - platform: homeassistant
        id: 'start'
        event: start
      - platform: event
        id: 'reload'
        event_type: automation_reloaded     
        
    condition:
    # Forecast should never be zero, so zero would show error ?
      - condition: numeric_state
        entity_id: sensor.solcast_forecast_today
        above: 0
      - condition: numeric_state
        entity_id: sensor.solcast_forecast_tomorrow
        above: 0        
      - condition: state
        entity_id: sensor.solaredge_status_text
        state: "Sleep"
      
    variables:
      overnight_usage_percent: 35.0
      tomorrow_solar_threshold: 8.0
      go_tomorrow_solar_threshold: 12.0      
      charge_rate: 3.6
      powerwall_capacity: 13.2
      percentage_per_half_hour: 13.6
      #{% set percentage_per_half_hour = (100*(charge_rate/2.0)/powerwall_capacity) %}
      
    action:
      - choose:
          - conditions: 
              - condition: state
                entity_id: input_boolean.go_tariff
                state: 'on'
            sequence:
              - alias: "Update Solcast Forecast"
                event: solcast_update_all_forecasts
              - delay: 30
              - service: input_number.set_value
                target:
                  entity_id: input_number.overnight_powerwall_max_charge
                data:
                  value: "{% set solar_forecast = (states('sensor.solcast_forecast_tomorrow')|float(0)) if now().strftime('%-H')|int(0) > 12 else (states('sensor.solcast_forecast_today')|float(0)) %}{{ ([0,[(100 * (powerwall_capacity - (solar_forecast - go_tomorrow_solar_threshold))) / powerwall_capacity,100]|min]|max)|int(0) }}"
              - service: input_number.set_value
                target:
                  entity_id: input_number.powerwall_charge_below_x_pence
                data:
                  value: 5
              - service: telegram_bot.send_message
                data:
                  target: !secret telegram_chat_id_bruce
                  title: "Solar Today/Tomorrow: {{ states('sensor.solcast_forecast_today')|int(0) }}/{{states('sensor.solcast_forecast_tomorrow')|int(0) }}kWh"
                  message: >

                    {% set charge_slots_needed =  (0.5 + (((states('input_number.overnight_powerwall_max_charge')|float(0)) + overnight_usage_percent - (states('sensor.powerwall_charge')|float(0)) )/percentage_per_half_hour))|int(0)  %}
                    
                    Powerwall Charge Level: {{ states('sensor.powerwall_charge')|int(0) }}%                    
                    
                    {% if charge_slots_needed > 0 %}Powerwall Charging overnight to {{ states('input_number.overnight_powerwall_max_charge')|int(0) }}%
                    
                    {{ charge_slots_needed }} half hour periods.  

                    Max Price of 5p{% endif %}
                
                
          - conditions: "{{ states.octopusagile.rates == none  or  (states.octopusagile.rates.attributes.values()|count) < 34 or  (states.octopusagile.rates.attributes.values()|count) > 52  or (states('sensor.solcast_forecast_tomorrow')|int(0)) == 0 }}"
            sequence:
              - service: notify.telegram_bruce
                data:
                  title: "Powerwall: Error"
                  message: "Error setting overnight charging price, will try again within the next half hour."
                    
        default:
          - alias: "Update Solcast Forecast"
            event: solcast_update_all_forecasts
          - delay: 30         
          - service: input_number.set_value
            target:
              entity_id: input_number.overnight_powerwall_max_charge
            data:
              value: "{% set solar_forecast = (states('sensor.solcast_forecast_tomorrow')|float(0)) if now().strftime('%-H')|int(0) > 12 else (states('sensor.solcast_forecast_today')|float(0)) %}{{ ([0,[(100 * (powerwall_capacity - (solar_forecast - tomorrow_solar_threshold))) / powerwall_capacity,100]|min]|max)|int(0) }}"
          - service: input_number.set_value
            target:
              entity_id: input_number.powerwall_charge_below_x_pence
            data:
              # Take the 20 last prices for the list (next 10 hours), sort them by price and take the 8th for example if 4 hours charging (80% charging) is required.
              value: "{% set howmanyrates = 18 if now().strftime('%-H')|int(0) > 12 else (18-now().strftime('%-H')|int(0)) %}{% set solar_forecast = (states('sensor.solcast_forecast_tomorrow')|float(0)) if now().strftime('%-H')|int(0) > 12 else (states('sensor.solcast_forecast_today')|float(0)) %}{% set rates =  states.octopusagile.rates.attributes.values()|list %}{% set octopusrates = rates[-howmanyrates:]|sort %}{% set charge_slots_needed =  (0.5 + (((states('input_number.overnight_powerwall_max_charge')|float(0)) + overnight_usage_percent - (states('sensor.powerwall_charge')|float(0)) )/percentage_per_half_hour))|int(0)  %}{% if charge_slots_needed == 0 %}0.0{% else %}{{  (octopusrates[charge_slots_needed -1]|float(0) )  }}{% endif %}"
          - service: telegram_bot.send_message
            data:
              target: !secret telegram_chat_id_bruce
              title: "Solar Today/Tomorrow: {{ states('sensor.solcast_forecast_today')|int(0) }}/{{states('sensor.solcast_forecast_tomorrow')|int(0) }}kWh"
              message: >

                {% set charge_slots_needed =  (0.5 + (((states('input_number.overnight_powerwall_max_charge')|float(0)) + overnight_usage_percent - (states('sensor.powerwall_charge')|float(0)) )/percentage_per_half_hour))|int(0)  %}
                
                Powerwall Charge Level: {{ states('sensor.powerwall_charge')|int(0) }}%                    
                
                {% if charge_slots_needed > 0 %}Powerwall Charging overnight to {{ states('input_number.overnight_powerwall_max_charge')|int(0) }}%
                
                {{ charge_slots_needed }} half hour periods.  

                Max Price of {{ states('input_number.powerwall_charge_below_x_pence')  }}p{% endif %}

automation:
  - id: telegram_command
    alias: 'Process Telegram Command'
    
    description: >
      Telegram commands
      
    trigger:
      - platform: event
        id: 'command'
        event_type: telegram_command
        
    action:
      - choose:
      
            # /Water 
          - conditions: "{{ trigger.event.data.text.lower() == '/water' }}"
            sequence:
              - service: switch.turn_on
                target:
                  entity_id: switch.shutoff_valve
              - service: telegram_bot.send_message
                data:
                  target: "{{trigger.event.data.chat_id}}"                
                  message: "Water turned {{ states('switch.shutoff_valve') }}"
                  inline_keyboard:
                    - "{{'Turn On:/water_on' if is_state('switch.shutoff_valve','off') else 'Turn Off:/water_off'}}"
                    - 'OK:/remove_keyboard'  
                    
            # /hrt      
          - conditions: "{{trigger.event.data.text.lower() == '/hrt'}}"
            sequence:
              - service: telegram_bot.send_message
                data:
                  target: "{{trigger.event.data.chat_id}}"                
                  title: "HRT Gel"
                  message: "Last used: {{ states('input_datetime.hrt_last_used')}}"
                  
            # /solar
          - conditions: "{{ trigger.event.data.command.lower() == '/solar' }}"
            sequence:
              - service: telegram_bot.send_message
                data:
                  target: "{{trigger.event.data.chat_id}}"                
                  message: >
                    Solar Power Now: {{ states('sensor.solar_production')}} kW
                    
                    Today's Production: {{ states('sensor.solar_energy_daily_kwh')|round(1)}} kWh
                    
                    Today's Forecast: {{ states('sensor.solcast_forecast_today') }} kWh
                  inline_keyboard:
                    - 'Refresh:/solar_refresh, OK:/remove_keyboard'

            # /powerwall                    
          - conditions: "{{ trigger.event.data.command.lower() == '/powerwall' }}"
            sequence:
              - service: telegram_bot.send_message
                data:
                  target: "{{trigger.event.data.chat_id}}"                
                  message: >
                    Powerwall at {{states('sensor.powerwall_charge_corrected')}}% ({{ states('input_number.powerwall_reserve_requested')|int(0) }}% Reserve)
                    
                    {% if is_state('sensor.powerwall_direction','import') %}Discharging @ {{ states('sensor.powerwall_discharging') }} kW{% elif is_state('sensor.powerwall_direction','export')%}Charging @ {{ states('sensor.powerwall_charging') }} kW{% else %}On standby{% endif %}
                    
                    Home Load: {{ states('sensor.floorplan_powerwall_home_load') }} kW
                                        
            # /litter
          - conditions: "{{ trigger.event.data.command.lower() == '/litter' and is_state('binary_sensor.litter_trays_dirty','on') }}"
            sequence:
              - service: telegram_bot.send_message
                data:
                  target: "{{trigger.event.data.chat_id}}"
                  message: >
                    {% set litter_trays = [states.binary_sensor.littertray_utility_dirty,
                                          states.binary_sensor.littertray_shower_dirty,
                                          states.binary_sensor.littertray_downstairs_dirty,
                                          states.binary_sensor.littertray_drum_dirty] %}
                    {%- for tray in litter_trays -%}
                    {%- if tray.state == 'on' -%}
                    {{ tray.name }}
                    {%- if not loop.last %}, {% endif -%}
                    {%- endif -%}
                    {%- endfor -%}     
                    
            # /litter
          - conditions: "{{ trigger.event.data.command.lower() == '/litter' and is_state('binary_sensor.litter_trays_dirty','off') }}"
            sequence:
              - service: telegram_bot.send_message
                data:
                  target: "{{trigger.event.data.chat_id}}"
                  message: "All Litter Trays are clean"
      
            # /alarm and Alarm Disarmed
          - conditions: "{{ trigger.event.data.command.lower() == '/alarm' and is_state('alarm_control_panel.texecom','disarmed') }}"
            sequence:
              - service: telegram_bot.send_message
                data:
                  target: "{{trigger.event.data.chat_id}}"
                  message: >
                    Alarm currently disarmed.
                    
                    Which Alarm Status do you want?
                  inline_keyboard:
                    - 'Arm:/arm_away'
                    - 'Home:/arm_home, Night:/arm_night'
                    - 'OK:/remove_keyboard'

            # /alarm and Alarm Armed          
          - conditions: "{{ trigger.event.data.command.lower() == '/alarm' }}"
            sequence:
              - service: telegram_bot.send_message
                data:
                  target: "{{trigger.event.data.chat_id}}"
                  message: >
                    Alarm currently {{states('alarm_control_panel.texecom').replace('_',' ')}}
                    
                    Which Alarm Status do you want?                  
                  inline_keyboard:
                    - 'Disarm:/disarm'
                    - 'OK:/remove_keyboard'         

            # /status           
          - conditions: "{{ trigger.event.data.command.lower() == '/status'}}"
            sequence:
              - service: telegram_bot.send_message
                data:
                  target: "{{trigger.event.data.chat_id}}"                
                  message: >
                    {{ 'There is a powercut!' if is_state('binary_sensor.grid_status','off') }}

                    Alarm currently {{states('alarm_control_panel.texecom').replace('_',' ')}}

                    Water supply is {{ states('switch.shutoff_valve') }}
                    
                    {% if is_state('binary_sensor.water_running','on') %}Water has been running for 
                    {%- set time = (as_timestamp(now()) - as_timestamp(states.binary_sensor.water_running.last_changed)) | int  %}
                    {%- set minutes = ((time % 3600) // 60) %}
                    {%- set minutes = ' {}minutes'.format(minutes) if minutes > 0 else '' %}
                    {%- set hours = ((time % 86400) // 3600) %}
                    {%- set hours = ' {}hours '.format(hours) if hours > 0 else '' %}
                    {%- set days = (time // 86400) %}
                    {%- set days = ' {}days '.format(days) if days > 0 else '' %}
                    {{ ' less than 1 minute' if time < 60 else days + hours + minutes }}
                  
                    currently at {{ states('sensor.water_flow_rate') }} gpm{% else %}Water is not Running{% endif %}
                    
                    Powerwall at {{states('sensor.powerwall_charge_corrected')}}% ({% if is_state('sensor.powerwall_direction','import') %}Discharging{% elif is_state('sensor.powerwall_direction','export')%}Charging{% else %}on standby{% endif %})
                    
                    Solar Power Now: {{ states('sensor.solar_production')}} kW
                    
                    Solar Production Today: {{ states('sensor.solar_energy_daily_kwh')|round(1) }} kWh
                    
                    Solar Forecast (Today): {{ states('sensor.solcast_forecast_today_rounded') }} kWh
                  
                    Solar Forecast (Tomorrow): {{ states('sensor.solcast_forecast_tomorrow_rounded') }} kWh
                    
                    Paddy ({{ states('sensor.vf1ag000366115079_battery_level') }}%) is {% if states('sensor.zappi_paddy_mode') != 'Stopped' %}Charging ({{ states('sensor.zappi_paddy_mode') }}) @ {{ states('sensor.zappi_paddy_power') }}kW{% elif is_state('sensor.zappi_paddy_status','EV Connected') %}Plugged in{% elif is_state('device_tracker.vf1ag000366115079_location','home') or is_state('device_tracker.vf1ag000366115079_location','Home') %}unplugged{% else %}not at home{% endif %}
                    
                    Jyggy ({{ states('sensor.jyggy_battery_level') }}%) is {% if states('sensor.zappi_jyggy_mode') != 'Stopped' %}Charging ({{ states('sensor.zappi_jyggy_mode') }}) @ {{ states('sensor.zappi_jyggy_power') }}kW{% elif is_state('sensor.zappi_jyggy_status','EV Connected') %}Plugged in{% elif is_state('sensor.jyggy_location','Home') or is_state('sensor.jyggy_location','home') %}unplugged{% else %}not at home{% endif %}

                    HotTub is {{states('sensor.hottub_summary') }}

                    {{ 'Bedroom Fan is on
                    ' if is_state('fan.bedroom_fan','on') }}

                    {{ 'Conservatory Fan is on
                    ' if is_state('fan.conservatory_fan','on') }}
                    
                    {% if is_state('switch.electric_blanket_bruce','on') and is_state('switch.electric_blanket_sarah','on') %}Both electric blankets are on
                    
                    {% elif is_state('switch.electric_blanket_bruce','on') %}Bruce's electric blanket is on
                    
                    {% elif is_state('switch.electric_blanket_sarah','on') %}Sarah's electric blanket is on                    

                    {% endif %}{{ 'Lights are on downstairs
                    
                    ' if is_state('light.downstairs','on') }}
                    {{ 'Lights are on Outside
                    
                    ' if is_state('light.outside','on') }}
                    {{ 'Lights are on upstairs
                    
                    ' if is_state('light.upstairs','on') }}
                    {{ 'TV on in lounge
                    
                    ' if is_state('input_boolean.watching_skytv','on') }}
                    {{ 'SONOS playing in the kitchen
                    
                    ' if is_state('media_player.kitchen_sonos','playing') }}
                    {{ 'SONOS playing in Sophie bedroom
                    
                    ' if is_state('media_player.sophies_sonos','playing') }}
                    {{ 'SONOS playing in Kate bedroom
                    
                    ' if is_state('media_player.kates_sonos','playing') }}
                    {{ 'SONOS playing in the Lounge
                    
                    ' if is_state('media_player.lounge_sonos','playing') }}
                    {{ 'SONOS playing in the Bar
                    
                    ' if is_state('media_player.bar_sonos','playing') }}
                    {{ 'Conservatory door is open
                    
                    ' if is_state('binary_sensor.front_door','on') }}
                    {{ 'Front door is open
                    
                    ' if is_state('binary_sensor.front_door','on') }}
                    {{ 'Back gate is open
                    
                    ' if is_state('binary_sensor.back_gate_door','on') }}
                    {{ 'Back door is open
                    
                    ' if is_state('binary_sensor.back_door','on') }}
                    {{ 'Shed door is open
                    
                    ' if is_state('binary_sensor.shed_door','on') }}                    
                    {{ 'Garage Back door is open
                    
                    ' if is_state('binary_sensor.garage_back_door','on') }}
                    {{ 'Understairs door is open
                    
                    ' if is_state('binary_sensor.under_stairs_door','on') }}
                    {{ 'Master bedroom door is closed
                    
                    ' if is_state('binary_sensor.master_bedroom_door','off') }}
                    {{ 'Lounge door is open
                    
                    ' if is_state('binary_sensor.lounge_door','on') }}
                    {{ 'Sophie\'s door is open
                    
                    ' if is_state('binary_sensor.sophies_bedroom_door','on') }}
                    {{ 'Kate\'s door is open
                    
                    ' if is_state('binary_sensor.kates_bedroom_door','off') }}
                    {{ 'Guest\'s door is open
                    
                    ' if is_state('binary_sensor.guest_bedroom_door','on') }}
                    {{ 'Downstairs Loo door is closed
                    
                    ' if is_state('binary_sensor.downstairs_toilet_door','off') }}
                    {{ 'Bathroom door is closed
                    
                    ' if is_state('binary_sensor.main_bathroom_door','off') }}
                                   
            # /tub /hottub /hot tub
          - conditions: "{{ trigger.event.data.command.lower() in ('/tub','/hottub','/hot tub') }}"
            sequence:
              - service: telegram_bot.send_message
                data:
                  target: "{{trigger.event.data.chat_id}}"
                  message: >
                    Hottub is {{ states('sensor.hottub_summary') }} @ {{ states('input_number.hottub_water_temp')|int(0) }}°C.  
                    
                    Schedule {{ states('input_boolean.hottub_scheduled') }}: {{ states('input_number.hottub_water_target')|int(0) }}°C by {{ states('input_datetime.hottub_ready_by') }}
                  inline_keyboard:
                    - 'Set Time:/tub_set_time, Schedule On:/tub_sched_on'
                    - 'Set Temp:/tub_set_temp, Schedule Off:/tub_sched_off' 
                    - 'OK:/remove_keyboard'


            # /cars
          - conditions: "{{ trigger.event.data.command.lower() == '/cars' }}"
            sequence:
              - service: telegram_bot.send_message
                data:
                  target: "{{trigger.event.data.chat_id}}"
                  message: >
                    /Paddy ({{ states('sensor.vf1ag000366115079_battery_level') }}%) is {% if states('sensor.zappi_paddy_mode') != 'Stopped' %}Charging ({{ states('sensor.zappi_paddy_mode') }}) @ {{ states('sensor.zappi_paddy_power') }}kW{% elif is_state('sensor.zappi_jyggy_status','EV Connected') %}Plugged in{% elif is_state('device_tracker.vf1ag000366115079_location','Home') %}unplugged{% else %}not at home{% endif %}
                    
                    /Jyggy ({{ states('sensor.jyggy_battery_level') }}%) is {% if states('sensor.zappi_jyggy_mode') != 'Stopped' %}Charging ({{ states('sensor.zappi_jyggy_mode') }}) @ {{ states('sensor.zappi_jyggy_power') }}kW{% elif is_state('sensor.zappi_jyggy_status','EV Connected') %}Plugged in{% elif is_state('sensor.jyggy_location','Home')%}unplugged{% else %}not at home{% endif %}
                    
            # /paddy
          - conditions: "{{ trigger.event.data.command.lower() == '/paddy' }}"
            sequence:
              - service: telegram_bot.send_message
                data:
                  target: "{{trigger.event.data.chat_id}}"
                  message: "Paddy ({{ states('sensor.vf1ag000366115079_battery_level') }}%) is {% if states('sensor.zappi_paddy_mode') != 'Stopped' %}Charging ({{ states('sensor.zappi_paddy_mode') }}) @ {{ states('sensor.zappi_paddy_power') }}kW{% elif is_state('sensor.zappi_paddy_status','EV Connected') %}Plugged in{% elif is_state('device_tracker.vf1ag000366115079_location','home') or is_state('device_tracker.vf1ag000366115079_location','Home') %}unplugged{% else %}not at home{% endif %}"
                  inline_keyboard:
                    - 'Fast:/paddy_fast, Eco+:/paddy_ecoplus'
                    - 'Eco:/paddy_eco, Stop:/paddy_stop' 
                    - 'OK:/remove_keyboard'  

            # /jyggy
          - conditions: "{{ trigger.event.data.command.lower() == '/jyggy' }}"
            sequence:
              - service: telegram_bot.send_message
                data:
                  target: "{{trigger.event.data.chat_id}}"
                  message: "Jyggy ({{ states('sensor.jyggy_battery_level') }}%) is {% if states('sensor.zappi_jyggy_mode') != 'Stopped' %}Charging ({{ states('sensor.zappi_jyggy_mode') }}) @ {{ states('sensor.zappi_jyggy_power') }}kW{% elif is_state('sensor.zappi_jyggy_status','EV Connected') %}Plugged in{% elif is_state('sensor.jyggy_location','Home')%}unplugged{% else %}not at home{% endif %}"
                  inline_keyboard:
                    - 'Fast:/jyggy_fast, Eco+:/jyggy_ecoplus'
                    - 'Eco:/jyggy_eco, Stop:/jyggy_stop' 
                    - 'OK:/remove_keyboard'                    

            # /help
          - conditions: "{{ trigger.event.data.command.lower() == '/help' }}"
            sequence:
              - service: telegram_bot.send_message
                data:
                  target: "{{trigger.event.data.chat_id}}"
                  message: >
                    You can type commands such as:

                    /status   /hottub  
                    
                    /camera  /alarm
                    
                    /paddy  /jyggy

                    or you can type text like:

                    set the hot tub to 37C at 08:00
                    
            # /camera
          - conditions: "{{ trigger.event.data.command.lower() == '/camera' }}"
            sequence:
              - service: telegram_bot.send_message
                data:
                  target: "{{trigger.event.data.chat_id}}"
                  message: "Which camera do you want to see?"
                  inline_keyboard:
                    - 'Drive:/still_drive, Bins:/still_bins'
                    - 'Patio:/still_patio, Gazebo:/still_gazebo' 
                    - 'Hall:/still_hall, Lounge:/still_lounge'
                    - 'Kitchen 1:/still_kitchen, Kitchen 2:/still_kitchen_2'             
                    - 'Bar:/still_bar, Landing:/still_landing'                         
                    - 'OK:/remove_keyboard'

               
         
